Parser {
  file =
    | < (space namespace)*:xs space >:r !.          -> Node("File" r "" xs)
  namespace =
    | < name:x space '{' rule*:ys space '}' >:r     -> Node("Namespace" r x ys)
  rule =
    | < name:x space '=' choice:y >:r               -> Node("Rule" r x [y])
  choice =
    | < (space '|')?
      sequence:x (space '|' sequence)*:xs >:r    -> Node("Or" r "" [x ~xs])
  sequence =
    | < expr*:xs maybeAction:ys >:r                 -> Node("Scope" r "" [Node("And" r "" [~xs ~ys])])
  expr =
    | < expr1:x space ':' name:y >:r          -> Node("Bind" r y [x])
    | space < '[' < expr*:xs >:r2 space ']' >:r1      -> Node("MatchList" r1 "" [Node("And" r2 "" xs)])
    | <>:r expr1
  expr1 =
    | <>:r expr2:x space '*'                       -> Node("Star" r "" [x])
    | <>:r expr2:x space '?'                       -> Node("Or" r "" [x Node("And" r "")])
    | <>:r space '!' expr2:x                       -> Node("Not" r "" [x])
    | < space '%' >:r                              -> Node("MatchCallRule" r "")
    | <>:r expr2:x                                 -> x
  expr2 =
    | <>:r name:x !(space '=')                     -> Node("MatchRule" r x)
    | <>:r space char:x '-' char:y                 -> Node("MatchObject" r "" [Node("Range" r [x y])])
    | <>:r space '\'' (!'\'' matchChar)*:xs '\''   -> Node("And" r "" xs)
    | <>:r space '.'                               -> Node("MatchObject" r "" [Node("Any" r "")])
    | <>:r space '(' choice:x space ')'            -> Node("Paren" r "" [x])
    | <>:r space '<' expr*:xs space '>'            -> Node("MatchRange" r "" [Node("And" r "" xs)])
  matchChar =
    | <>:r innerChar:x                             -> Node("MatchObject" r "" [Node("Eq" r x)])
  maybeAction =
    | < actionExpr:x >:r                      -> [Node("Action" r "" [x])]
    |                                         -> []
  actionExpr =
    | <>:r space '->' hostExpr:x
      (space ':' name | -> ""):y actionExpr:z -> Node("Set" r y [x z])
    | <>:r space '->' hostExpr:x              -> x
  hostExpr =
    | <>:r space string:x                          -> Node("String" r x)
    | <>:r space '[' hostListItem*:xs space ']'    -> Node("List" r "" xs)
    | <>:r space '{' hostExpr*:xs space '}'        -> Node("Format" r "" xs)
    | <>:r var:x space '(' hostExpr*:ys space ')'  -> Node("Call" r "" [x ~ys])
    | var
  hostListItem =
    | <>:r space '~'*:ys hostExpr:x                -> Node("ListItem" r len(ys) [x])
  var =
    | < name:x >:r !(space '=')                     -> Node("Lookup" r x)
  string    = '"'  (!'"'  innerChar)*:xs '"'  -> { xs }
  char      = '\''  !'\'' innerChar  :x  '\'' -> x
  innerChar = '\\' escape | .
  escape    = '\\' -> "\\" | '\'' -> "'"
            | '"'  -> "\"" | 'n'  -> "\n"
  name      = space nameStart:x nameChar*:xs  -> { x xs }
  nameStart = 'a'-'z' | 'A'-'Z'
  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'
  space     = (' ' | '\n')*
}
