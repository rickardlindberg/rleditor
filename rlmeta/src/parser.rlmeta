Parser {
  file =
    | < (space namespace)*:xs space >:r !.          -> Node("File" r "" xs)
  namespace =
    | < name:x space '{' rule*:ys space '}' >:r     -> Node("Namespace" r x ys)
  rule =
    | < name:x space '=' choice:y >:r               -> Node("Rule" r x [y])
  choice =
    | < (space '|')?
      sequence:x (space '|' sequence)*:xs >:r    -> Node("Or" r "" [x ~xs])
  sequence =
    | < expr*:xs maybeAction:ys >:r                 -> Node("Scope" r "" [Node("And" r "" [~xs ~ys])])
  expr =
    | < expr1:x space ':' name:y >:r          -> Node("Bind" r y [x])
    | space < '[' < expr*:xs >:r2 space ']' >:r1      -> Node("MatchList" r1 "" [Node("And" r2 "" xs)])
    | <>:r expr1
  expr1 =
    | <>:r expr2:x space '*'                       -> Node("Placeholder" r ["Star" listify(x)])
    | <>:r expr2:x space '?'                       -> Node("Placeholder" r ["Or" "" listify(x) ["And" ""]])
    | <>:r space '!' expr2:x                       -> Node("Placeholder" r ["Not" listify(x)])
    | < space '%' >:r                              -> Node("MatchCallRule" r "")
    | <>:r expr2:x                                 -> x
  expr2 =
    | <>:r name:x !(space '=')                             -> Node("Placeholder" r ["MatchRule" x])
    | <>:r space char:x '-' char:y                         -> Node("Placeholder" r ["MatchObject" ["Range" x y]])
    | <>:r space '\'' (!'\'' matchChar)*:xs '\''           -> Node("Placeholder" r ["And" "" ~xs])
    | <>:r space '.'                                       -> Node("Placeholder" r ["MatchObject" ["Any"]])
    | <>:r space '(' choice:x space ')'                    -> Node("Placeholder" r listify(x))
    | <>:r space '<' (expr:x -> listify(x))*:xs space '>'  -> Node("Placeholder" r ["MatchRange" ["And" "" ~xs]])
  matchChar =
    | innerChar:x                             -> ["MatchObject" ["Eq" x]]
  maybeAction =
    | < actionExpr:x >:r                      -> [Node("Action" r "" [x])]
    |                                         -> []
  actionExpr =
    | <>:r space '->' hostExpr:x
      (space ':' name | -> ""):y actionExpr:z -> Node("Placeholder" r ["Set" y x listify(z)])
    | <>:r space '->' hostExpr:x              -> Node("Placeholder" r x)
  hostExpr =
    | space string:x                          -> ["String" x]
    | space '[' hostListItem*:xs space ']'    -> ["List" ~xs]
    | space '{' hostExpr*:xs space '}'        -> ["Format" ~xs]
    | var:x space '(' hostExpr*:ys space ')'  -> ["Call" x ~ys]
    | var
  hostListItem =
    | space '~'*:ys hostExpr:x                -> ["ListItem" len(ys) x]
  var =
    | name:x !(space '=')                     -> ["Lookup" x]
  string    = '"'  (!'"'  innerChar)*:xs '"'  -> { xs }
  char      = '\''  !'\'' innerChar  :x  '\'' -> x
  innerChar = '\\' escape | .
  escape    = '\\' -> "\\" | '\'' -> "'"
            | '"'  -> "\"" | 'n'  -> "\n"
  name      = space nameStart:x nameChar*:xs  -> { x xs }
  nameStart = 'a'-'z' | 'A'-'Z'
  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'
  space     = (' ' | '\n')*
}
