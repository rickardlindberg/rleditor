* Fix display of cursor so that left/right behaves as expected.

* Implement node cursor/selection movements: select parent, select
  next/previous sibling.

* Status line should show row, col.

* Custom editor: select text, choose edit as color, it parses the color, opens
  a color editor, and pretty prints the color in the parsed format.

* Initial spark: A code editor should do all the formatting for you. If it
  parses, you work in an AST, and it pretty prints it for you. There is no
  need to think about syntax. But it's all still text if you need.

* How to combine text only with AST edit operations?

* Code is beautiful. A code editor should show that beauty.

* Range matching in RLMeta: `{ .*:xs }:range -> Node(range xs)`.

* F-string syntax in RLMeta instead of `{}`.

* Ncurses UI.

* The editor should have Ctrl+T. It should show a file tree + the parsed
  structure for each file. Should be able to filter on type in search bar.

* Dogfeeding: edit `ideas.txt` with rledit. Define parser for this list,
  markdown-ish format. Try to edit it and see where it breaks.

* Special syntax for OOP-classes?

    class Point:
        fields x, y
        constructors:
            origin -> Point(x=0, y=0)
        methods:
            move dx dy -> Point(x=x+dx, ...)

    class Point
        field x
        field y
        constructor origin = x=0, y=0
        def move dx dy = ...
