JsonParser {
    file      = #:s document:x s #:e !.         -> ["Document" s e "" x]
    document  =
        | string
        | true
        | false
        | null
        | number
        | list
        | dict
    string    = s '"' #:s char*:xs #:e '"'      -> ["String" s e {xs}]
    true      = s #:s 'true' #:e                -> ["True" s e ""]
    false     = s #:s 'false' #:e               -> ["False" s e ""]
    null      = s #:s 'null' #:e                -> ["Null" s e ""]
    number    = s #:s digit:x digit*:xs #:e     -> ["Number" s e int({[x ~xs]})]
    digit     = '0'-'9'
    list      = s #:s '[' items:x s ']' #:e     -> ["List" s e "" ~x]
    items     =
        | document:x (s ',' document)*:xs       -> [x ~xs]
        |                                       -> []
    dict      = s #:s '{' dictItems:x s '}' #:e -> ["Dict" s e "" ~x]
    dictItems =
        | dictItem:x (s ',' dictItem)*:xs       -> [x ~xs]
        |                                       -> []
    dictItem  = #:s key:x s ':' document:y #:e  -> ["Entry" s e x y]
    key       = s '"' #:s char*:xs #:e '"'      -> ["Key" s e {xs}]
    char      = !'"' .
    s         = (' ' | '\n')*
}

JsonPrettyPrinter {
    pretty = %:x !.
        -> []:prefix
        -> tokens(x)
    prettyInner = [%:x !.] -> x
    prettyInnerList =
        prettyInner:x (prettyInner:y newline:n
            -> [token("text" {"," n}) ~y]
        )*:xs -> [~x ~~xs]
        | -> []
    Document = . . . prettyInnerList
    Dict = . . . prettyInnerList:x newline:n !.
        -> token("text" {n "}"}):end
        -> ["    " ~prefix]:prefix
        -> [token("text" { "{" n }) ~x end]
    Entry = . . prettyInner:key prettyInner:value -> [
        ~key token("text" ": ") ~value
    ]
    Number = . . .:value -> [token("number" { value })]
    List = . . . prettyInnerList:x newline:n !.
        -> token("text" {n "]"}):end
        -> ["    " ~prefix]:prefix
        -> [token("text" { "[" n }) ~x end ]
    True = . . . -> [token("bool" "true")]
    False = . . . -> [token("bool" "false")]
    Null = . . . -> [token("null" "null")]
    Key = . . .:value -> [token("string" {"\"" value "\""})]
    String = . . .:value -> [token("string" {"\"" value "\""})]
    newline = -> { "\n" prefix }
}

JsonPrettyPrinterWithoutTokens {
    pretty = %:x !.  -> x
    prettyInner = [%:x !.] -> x
    prettyInnerItems =
        | prettyInner:x (prettyInner:y -> {",\n" y})*:xs -> {
                                                      "\n"
                                                      indent({x xs})
                                                      "\n"
                                                  }
        | -> []
    Document = . . . prettyInner
    Dict   = . . . prettyInnerItems:x !.       -> { "{" x "}" }
    List   = . . . prettyInnerItems:x !.       -> { "[" x "]" }
    Entry  = . . prettyInner:key prettyInner:value -> { key ": " value }
    Number = . . .:value                       -> { value }
    True   = . . .                             -> "true"
    False  = . . .                             -> "false"
    Null   = . . .                             -> "null"
    Key    = . . .:value                       -> {"\"" value "\""}
    String = . . .:value                       -> {"\"" value "\""}
}

JsonPositions {
    positions =
        .:name
        .:start
        .:end
        .:value
        positionsOuter*:xs
    -> cut(name start end [~~xs])
    positionsOuter = [positions:x] -> x
}
